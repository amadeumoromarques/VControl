// <auto-generated />
using System;
using Manufacturer.Project.Core.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseWebApi.Migrations
{
    [DbContext(typeof(ProjectDBContext))]
    [Migration("20241025191450_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("Manufacturer.Project.Domain.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("Created");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("Deleted");

                    b.Property<string>("HexaColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("HexaColor");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT")
                        .HasColumnName("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("SapCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("SapCode");

                    b.HasKey("Id");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("Manufacturer.Project.Domain.Models.PlantOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("Created");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("Deleted");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("DisplayName");

                    b.Property<string>("Key")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("Key");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT")
                        .HasColumnName("Modified");

                    b.HasKey("Id");

                    b.ToTable("PlantOptions", (string)null);
                });

            modelBuilder.Entity("Manufacturer.Project.Domain.Models.Truck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("ChassisCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ChassisCode");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("Created");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("Deleted");

                    b.Property<long>("IdColor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdColor");

                    b.Property<long>("IdPlantOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdPlantOptions");

                    b.Property<long>("IdTruckType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdTruckType");

                    b.Property<int>("ManufacturerYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ManufacturerYear");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT")
                        .HasColumnName("Modified");

                    b.HasKey("Id");

                    b.HasIndex("IdColor");

                    b.HasIndex("IdPlantOptions");

                    b.HasIndex("IdTruckType");

                    b.ToTable("Truck", (string)null);
                });

            modelBuilder.Entity("Manufacturer.Project.Domain.Models.TruckType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("Created");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("Deleted");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT")
                        .HasColumnName("Modified");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("TruckType", (string)null);
                });

            modelBuilder.Entity("TrackerEnabledDbContext.Common.Models.AuditLog", b =>
                {
                    b.Property<long>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDateUTC")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeFullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("TrackerEnabledDbContext.Common.Models.AuditLogDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditLogId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.ToTable("AuditLogDetails");
                });

            modelBuilder.Entity("TrackerEnabledDbContext.Common.Models.LogMetadata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditLogId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.ToTable("LogMetadata");
                });

            modelBuilder.Entity("Manufacturer.Project.Domain.Models.Truck", b =>
                {
                    b.HasOne("Manufacturer.Project.Domain.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("IdColor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Truck_Color");

                    b.HasOne("Manufacturer.Project.Domain.Models.PlantOptions", "PlantOptions")
                        .WithMany()
                        .HasForeignKey("IdPlantOptions")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Truck_PlantOptions");

                    b.HasOne("Manufacturer.Project.Domain.Models.TruckType", "TruckType")
                        .WithMany()
                        .HasForeignKey("IdTruckType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Truck_TruckType");

                    b.Navigation("Color");

                    b.Navigation("PlantOptions");

                    b.Navigation("TruckType");
                });

            modelBuilder.Entity("TrackerEnabledDbContext.Common.Models.AuditLogDetail", b =>
                {
                    b.HasOne("TrackerEnabledDbContext.Common.Models.AuditLog", "Log")
                        .WithMany("LogDetails")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("TrackerEnabledDbContext.Common.Models.LogMetadata", b =>
                {
                    b.HasOne("TrackerEnabledDbContext.Common.Models.AuditLog", "AuditLog")
                        .WithMany("Metadata")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditLog");
                });

            modelBuilder.Entity("TrackerEnabledDbContext.Common.Models.AuditLog", b =>
                {
                    b.Navigation("LogDetails");

                    b.Navigation("Metadata");
                });
#pragma warning restore 612, 618
        }
    }
}
